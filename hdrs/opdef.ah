; Names are always started with size, and you can't do an operation without 
;  first listing size.
; "∴=ab" for example, is equivalent to "mov rax,rbx"
; The "∴" represents the shl of one that equals it's byte size, in this case, 
;  eight bytes for a quadword. This manditory starting size also frees up use 
;  of non high-unicode characters as operations, vastly simplifying keyboard
;  layouts. This is from the parser searching for only higher than 0x7f bytes
;  to serve as potential starts of vectal instruction sequences, and straight 
;  copying those that are less than 0x7f. This means you can more or less just 
;  insert this into code without any boilerplate and as long as you run the 
;  preprocessor before assembly it will recognize sequences just fine.
; Each sequence is ended by any whitespace, any byte less or equal to 0x20,
;  so the size of each individual sequence, or potential sequence, is known
;  before actuall processing it (and no sequence is larger than 32 bytes by
;  soft, implementation requirement). Memory and immediate operands are given
;  in the succeeding token after it, and as direct copies of their normal
;  assembly code, so this is not meant as an intermediate language for writing
;  assembler-portable code.
;  "ι=*b [rax+rbx+buffer]", for example, is "mov [rax+rbx+buffer], rbx"
;  "ι=a# somelabel" is "mov rax, somelabel"
;  "ι=a# 42" is "mov rax, 42"
; Registers are defined as letters from "a" to "p" and granularity of the
;  operation is given in the byte after the size.
;  "ζζ+ab" is "add al, bl"
;  "λζ+aab" is "vpaddb ymm0, ymm0, ymm1"
; If there is only one granularity for that size and operation, granularity
;  symbols can be omitted. Always size and sometimes granularity when it's
;  actually relevant
;  "ζ+ab" is "add al,bl"
; If one instruction omits a size, it mooches it from the last instruction 
;  even if the granularity isn't relevant to the first, so you can set up long 
;  chains of instructions with single characters for operations and registers.
;  "λζ=ba+ac is:
;  "vmovdqu ymm1,ymm0
;   vpaddb ymm0,ymm2"
; This function is only valid in single lines of unbroken instructions (no
;  whitespace to tokenize) so no memory definitions or immediates and the next
;  line must start with a size for clarity.

; table defines the indexes into opsizetable and opnametable is
opunicode:
dw 0x002b ; op_add
dw 0x002d ; op_sub
dw 0x003d ; op_mov
dw 0x007e ; op_not
dw 0x00d7 ; op_mul
dw 0x00f7 ; op_div
dw 0x21af ; op_mvmsk - movmskb
dw 0x21cb ; op_xchg
dw 0x2214 ; op_hadd
dw 0x2218 ; op_jmp
dw 0x2251 ; op_lea
dw 0x2259 ; op_test
dw 0x225a ; op_mova - mov aligned
dw 0x225f ; op_eq - compare equal ≟
dw 0x226a ; op_shl
dw 0x226b ; op_shr
dw 0x2270 ; op_gt
dw 0x22bc ; op_nand
dw 0x22bd ; op_xor
dw 0x22c0 ; op_and
dw 0x22c1 ; op_or
dw 0x22b1 ; op_bcast
dw 0x22d6 ; op_tzcnt
dw 0x22d7 ; op_lzcnt
dw 0x22ee ; op_popcnt
dw 0x2aef ; op_pop
dw 0x2af0 ; op_push
dw 0x2af1 ; op_call
dw 0x27df ; op_ret
dw 0x29d6 ; op_perm
dw 0x29f0 ; op_cvt
dq 0,0,0,0
opunicodeend:
; offsets into the opname array for each operation
opnametable:
dw op_add-opnames
dw op_sub-opnames
dw op_mov-opnames
dw op_not-opnames
dw op_mul-opnames
dw op_div-opnames
dw op_mvmsk-opnames
dw op_xchg-opnames
dw op_hadd-opnames
dw op_jmp-opnames
dw op_lea-opnames
dw op_test-opnames
dw op_mova-opnames
dw op_eq-opnames
dw op_shl-opnames
dw op_shr-opnames
dw op_gt-opnames
dw op_nand-opnames
dw op_xor-opnames
dw op_and-opnames
dw op_or-opnames
dw op_bcast-opnames
dw op_tzcnt-opnames
dw op_lzcnt-opnames
dw op_popcnt-opnames
dw op_pop-opnames
dw op_push-opnames
dw op_call-opnames
dw op_ret-opnames
dw op_perm-opnames
dw op_cvt-opnames
opargtable:
dw oparg_add-opargs
dw oparg_sub-opargs
dw oparg_mov-opargs
dw oparg_not-opargs
dw oparg_mul-opargs
dw oparg_div-opargs
dw oparg_mvmsk-opargs
dw oparg_xchg-opargs
dw oparg_hadd-opargs
dw oparg_jmp-opargs
dw oparg_lea-opargs
dw oparg_test-opargs
dw oparg_mova-opargs
dw oparg_eq-opargs
dw oparg_shl-opargs
dw oparg_shr-opargs
dw oparg_gt-opargs
dw oparg_nand-opargs
dw oparg_xor-opargs
dw oparg_and-opargs
dw oparg_or-opargs
dw oparg_bcast-opargs
dw oparg_tzcnt-opargs
dw oparg_lzcnt-opargs
dw oparg_popcnt-opargs
dw oparg_pop-opargs
dw oparg_push-opargs
dw oparg_call-opargs
dw oparg_ret-opargs
dw oparg_perm-opargs
dw oparg_cvt-opargs
opargtableend:
; Array of operation argument definitions. First byte has the operation
;  name index offset in the right nibble and the argument count in the
;  left nibble. Second byte is its size and grainularity selector. The 
;  third byte is a double bit mask for each argument, where the right 
;  bit of each is set to specify an immediate must be here and the left
;  defines that a memory dereference must be here. Nothing set means
;  it is a register. The next three bytes do the same thing but allow
;  for multiple resolutions of the same argument size configuration.
; The last two bytes define the actual sizes of each argument, mostly so
;  the correct register name can be written but can also be used to
;  check for errors before translation.
opargs:
%macro mimmtorax 1
db 0x1%1,0x11,1,1,1,1,0x01,0
db 0x1%1,0x22,1,1,1,1,0x02,0
db 0x1%1,0x33,1,1,1,1,0x03,0
db 0x1%1,0x44,1,1,1,1,0x03,0
%endmacro
%macro msimdnogran 1 ; for simd operations that don't vary granularity
db 0x3%1,0x55,0b10,0,0,0,0x55,5
db 0x3%1,0x66,0b10,0,0,0,0x66,6
db 0x3%1,0x77,0b10,0,0,0,0x77,7
%endmacro
%macro msimdallgran 0 ; all variations of 3 arg simd granularity
db 0x31,0x51,0b10,0,0,0,0x55,0x5
db 0x32,0x52,0b10,0,0,0,0x55,0x5
db 0x33,0x53,0b10,0,0,0,0x55,0x5
db 0x34,0x54,0b10,0,0,0,0x55,0x5
db 0x31,0x61,0b10,0,0,0,0x66,0x6
db 0x32,0x62,0b10,0,0,0,0x66,0x6
db 0x33,0x63,0b10,0,0,0,0x66,0x6
db 0x34,0x64,0b10,0,0,0,0x66,0x6
db 0x31,0x71,0b10,0,0,0,0x77,0x7
db 0x32,0x72,0b10,0,0,0,0x77,0x7
db 0x33,0x73,0b10,0,0,0,0x77,0x7
db 0x34,0x74,0b10,0,0,0,0x77,0x7
%endmacro
%macro mexpregmem 1
db 0x2%1,0x11,0,0b10,0b1000,0b1,0x11,0
db 0x2%1,0x22,0,0b10,0b1000,0b1,0x22,0
db 0x2%1,0x33,0,0b10,0b1000,0b1,0x33,0
db 0x2%1,0x44,0,0b10,0b1000,0b1,0x44,0
%endmacro
%macro mexpimmed 1
db 0x2%1,0x11,0b1001,1,1,1,0x11,0
db 0x2%1,0x22,0b1001,1,1,1,0x22,0
db 0x2%1,0x33,0b1001,1,1,1,0x33,0
db 0x2%1,0x44,0b1001,1,1,1,0x44,0
%endmacrO
%macro msimdallfloats 1 ; all variations of 3 arg simd granularity
%assign %%next %1 + 1
db 0x3%1,    0x58,0b10,0,0,0,0x55,0x5
db 0x3%%next,0x59,0b10,0,0,0,0x55,0x5
db 0x3%1,    0x68,0b10,0,0,0,0x66,0x6
db 0x3%%next,0x69,0b10,0,0,0,0x66,0x6
db 0x3%1,    0x78,0b10,0,0,0,0x77,0x7
db 0x3%%next,0x79,0b10,0,0,0,0x77,0x7
%endmacro
oparg_nand:
db 0x31,0x33,0b100000,0,0,0,0x33,0x03
db 0x31,0x44,0b100000,0,0,0,0x44,0x04
msimdnogran 2
dq 0
oparg_and:
; implicit AND of imediates into rax
mimmtorax 1
; explicit AND of immediates into registers and memory
mexpimmed 1
;explicit AND of memory and registers
mexpregmem 1
; simd regs
msimdnogran 2
dq 0
oparg_add:
msimdallgran
msimdallfloats 7
; explicit register, memory and immediate adds
mexpregmem 5
mexpimmed 5
; inc
db 0x16,0x11,2,0,0,0,0x1,0
db 0x16,0x22,2,0,0,0,0x2,0
db 0x16,0x33,2,0,0,0,0x3,0
db 0x16,0x44,2,0,0,0,0x4,0
; implicit register rax
mimmtorax 5
dq 0
oparg_hadd:
db 0x31,0x52,0,0,0,2,0x55,5 ; integer hadd
db 0x31,0x62,0,0,0,2,0x66,6
db 0x32,0x53,0,0,0,2,0x55,5
db 0x32,0x63,0,0,0,2,0x66,6
db 0x33,0x58,0,0,0,2,0x55,5 ; real hadd
db 0x33,0x68,0,0,0,2,0x66,6
db 0x34,0x59,0,0,0,2,0x55,5
db 0x34,0x69,0,0,0,2,0x66,6
db 0x25,0x33,0,0,0,2,0x33,0 ; adox for nicu flagless adds
db 0x25,0x44,0,0,0,2,0x44,0

dq 0
oparg_sub:
msimdallgran
msimdallfloats 7
; explicit register
mexpregmem 5
mexpimmed 5
; dec
db 0x16,0x11,0,0,0,0,0x1,0
db 0x16,0x22,0,0,0,0,0x2,0
db 0x16,0x33,0,0,0,0,0x3,0
db 0x16,0x44,0,0,0,0,0x4,0
; implicit register rax
mimmtorax 5
dq 0
oparg_mul:
db 0x11,0x33,0,0,0,2,0x3,0 ; int muls
db 0x11,0x44,0,0,0,2,0x4,0
db 0x32,0x58,0,0,0,2,0x55,0x5 ; vmulps
db 0x32,0x68,0,0,0,2,0x66,0x6 
db 0x33,0x59,0,0,0,2,0x55,0x5 ; vmulpd
db 0x33,0x69,0,0,0,2,0x66,0x6 
dq 0
oparg_div:
db 0x11,0x33,0,0,0,2,0x3,0 ; int div
db 0x11,0x44,0,0,0,2,0x4,0
db 0x32,0x58,0,0,0,2,0x55,0x5 ; vdivps
db 0x32,0x68,0,0,0,2,0x66,0x6 
db 0x33,0x59,0,0,0,2,0x55,0x5 ; vdivpd
db 0x33,0x69,0,0,0,2,0x66,0x6 
dq 0
oparg_mov:
; normal regs
db 0x21,0x11,0,0,0,0,0x11,0
db 0x21,0x11,0b1,0b1000,0b10,0b1001,0x11,0
db 0x21,0x22,0,0,0,0,0x22,0
db 0x21,0x22,0b1,0b1000,0b10,0b1001,0x22,0
db 0x21,0x33,0,0,0,0,0x33,0
db 0x21,0x33,0b1,0b1000,0b10,0b1001,0x33,0
db 0x21,0x44,0,0,0,0,0x44,0
db 0x21,0x44,0b1,0b1000,0b10,0b1001,0x44,0
; simd regs
db 0x24,0x61,0b10,0b1000,0,0,0x66,0
db 0x24,0x55,0b10,0b1000,0,0,0x55,0
db 0x24,0x66,0b10,0b1000,0,0,0x66,0
db 0x24,0x77,0b10,0b1000,0,0,0x77,0
; mov general sizes to simd and back
db 0x22,0x53,0,0,0,2,0x35,0
db 0x22,0x35,0,0,0,8,0x53,0
db 0x22,0x53,0,0,0,2,0x35,0
db 0x22,0x35,0,0,0,8,0x35,0
db 0x23,0x54,0,0,0b10,0b1000,0x45,0
db 0x23,0x45,0,0,0b10,0b1000,0x54,0
; movxz - loading memory ops only
db 0x25,0x31,0b10,0b10,0b10,0b10,0x13,0
db 0x25,0x32,0b10,0b10,0b10,0b10,0x23,0
db 0x25,0x41,0b10,0b10,0b10,0b10,0x14,0
db 0x25,0x42,0b10,0b10,0b10,0b10,0x24,0
; high registers
db 0x21,0x1b,0,0,0,0,0xb1,0
db 0x21,0xb1,8,1,2,0,0x1b,0
db 0x21,0xbb,8,1,2,0,0xbb,0
; segment and control registers
db 0x21,0x2c,0,0,0,0,0xc2,0
db 0x21,0xc2,0,0,0,0,0x2c,0
db 0x21,0x3c,0,0,0,0,0xc3,0
db 0x21,0xc3,0,0,0,0,0x3c,0
dq 0
oparg_mova:
db 0x21,0x55,0b10,0b1000,0,0,0x55,0
db 0x21,0x66,0b10,0b1000,0,0,0x66,0
db 0x21,0x77,0b10,0b1000,0,0,0x77,0
; movsz - loading memory ops only
db 0x22,0x31,0b10,0b10,0b10,0b10,0x13,0
db 0x22,0x32,0b10,0b10,0b10,0b10,0x23,0
db 0x22,0x41,0b10,0b10,0b10,0b10,0x14,0
db 0x22,0x42,0b10,0b10,0b10,0b10,0x24,0
db 0x23,0x43,0b10,0b10,0b10,0b10,0x34,0
; insertions
db 0x34,0x53,0b1001,1,1,1,0x35,1 ; 3 arg pinsr(d+q)
db 0x35,0x54,0b1001,1,1,1,0x45,1
db 0x46,0x53,0b1001,1,1,1,0x55,0x13 ; 4 arg vpinsr(d+q)
db 0x47,0x54,0b1001,1,1,1,0x55,0x14
dq 0
oparg_gt:
; simd only
msimdallgran
dq 0
oparg_eq:
; simd regs
msimdallgran
;explicit compares of memory and registers
mexpregmem 5
; implicit compares of imediates to rax
mimmtorax 5
; explicit compares of immediates to registers and memory
mexpimmed 5
db 0x26,0x55,0b10,0,0,0,0x55,0
db 0x26,0x66,0b10,0,0,0,0x66,0
db 0x26,0x77,0b10,0,0,0,0x77,0
; floating point packed comparisons
db 0x47,0x58,1,1,1,0b101,0x55,0x15 ; vcmpps
db 0x47,0x68,1,1,1,0b101,0x66,0x16
db 0x47,0x78,1,1,1,0b101,0x77,0x17
db 0x48,0x59,1,1,1,0b101,0x55,0x15 ; vcmppd
db 0x48,0x69,1,1,1,0b101,0x66,0x16
db 0x48,0x79,1,1,1,0b101,0x77,0x17
dq 0
oparg_or:
; implicit OR of imediates into rax
mimmtorax 1
; explicit OR of immediates into registers and memory
mexpimmed 1
; explicit OR of memory and registers
mexpregmem 1
; simd OR
msimdnogran 2
dq 0
oparg_xor:
; implicit XOR of imediates into rax
mimmtorax 1
; explicit XOR of immediates into registers and memory
mexpimmed 1
; explicit XOR of memory and registers
mexpregmem 1
; simd XOR
msimdnogran 2
db 0x23,0x55,0,0,0,0,0x55,0 ; pxor normal
dq 0
oparg_bcast:
db 0x21,0x51,0b10,0b10,0b10,0b10,0x15,0 ; vpbroadcastb
db 0x21,0x61,0b10,0b10,0b10,0b10,0x16,0 
db 0x22,0x52,0b10,0b10,0b10,0b10,0x25,0 ; vpbroadcastw
db 0x22,0x62,0b10,0b10,0b10,0b10,0x26,0 
db 0x23,0x53,0b10,0b10,0b10,0b10,0x35,0 ; vpbroadcastd
db 0x23,0x63,0b10,0b10,0b10,0b10,0x36,0 
db 0x24,0x54,0b10,0b10,0b10,0b10,0x45,0 ; vpbroadcastd
db 0x24,0x64,0b10,0b10,0b10,0b10,0x46,0 
db 0x21,0x51,0,0,0,0,0x55,0 ; vpbroadcastb
db 0x21,0x61,0,0,0,0,0x56,0
db 0x22,0x52,0,0,0,0,0x55,0 ; vpbroadcastw
db 0x22,0x62,0,0,0,0,0x56,0
db 0x23,0x53,0,0,0,0,0x55,0 ; vpbroadcastd
db 0x23,0x63,0,0,0,0,0x56,0
db 0x24,0x54,0,0,0,0,0x55,0 ; vpbroadcastq
db 0x24,0x64,0,0,0,0,0x56,0
db 0x35,0x33,2,0,0,0,0x33,3
db 0x35,0x44,2,0,0,0,0x44,4
dq 0
oparg_mvmsk:
db 0x21,0x35,0,0,0,0,0x53,0
db 0x21,0x36,0,0,0,0,0x63,0
db 0x21,0x45,0,0,0,0,0x54,0
db 0x21,0x46,0,0,0,0,0x64,0
db 0x32,0x33,2,0,0,0,0x33,3
db 0x32,0x44,2,0,0,0,0x44,4
dq 0
oparg_test:
db 0x21,0x33,2,0,0,0,0x33,0
db 0x21,0x44,2,0,0,0,0x44,0
db 0x22,0x55,2,0,0,0,0x55,0
db 0x22,0x66,2,0,0,0,0x66,0
dq 0
oparg_tzcnt:
db 0x21,0x33,0b10,0,0,0,0x33,0
db 0x21,0x44,0b10,0,0,0,0x44,0
dq 0
oparg_lzcnt:
db 0x21,0x33,0b10,0,0,0,0x33,0
db 0x21,0x44,0b10,0,0,0,0x44,0
dq 0
oparg_shl:
db 0x21,0x11,0b1001,1,1,1,0x11,0 ; 2 arg has r-i and m-i
db 0x21,0x22,0b1001,1,1,1,0x12,0 ; immediate always 8 bits
db 0x21,0x33,0b1001,1,1,1,0x13,0
db 0x21,0x44,0b1001,1,1,1,0x14,0
db 0x36,0x63,0,0,0,0,0x66,0x6 ; simd variable shifts
db 0x37,0x64,0,0,0,0,0x66,0x6
db 0x32,0x33,0b1000,1,0,0,0x33,0x3 ; 'x' variant for r-r-r and r-m-r
db 0x32,0x44,0b1000,1,0,0,0x44,0x4
db 0x33,0x52,0b1000,1,1,1,0x55,0x5 ; simd version doesn't have byte gran
db 0x34,0x53,0b1000,1,1,1,0x55,0x5
db 0x35,0x54,0b1000,1,1,1,0x55,0x5
db 0x33,0x62,0b1000,1,1,1,0x66,0x6
db 0x34,0x63,0b1000,1,1,1,0x66,0x6
db 0x35,0x64,0b1000,1,1,1,0x66,0x6
dq 0
oparg_shr:
db 0x21,0x11,0b1001,1,1,1,0x11,0 ; 2 arg has r-i and m-i
db 0x21,0x22,0b1001,1,1,1,0x12,0 ; immediate always 8 bits
db 0x21,0x33,0b1001,1,1,1,0x13,0
db 0x21,0x44,0b1001,1,1,1,0x14,0
db 0x32,0x33,0b1000,1,0,0,0x33,0x3 ; 'x' variant for r-r-r and r-m-r
db 0x32,0x44,0b1000,1,0,0,0x44,0x4
db 0x36,0x63,0,0,0,0,0x66,0x6 ; simd variable shifts
db 0x37,0x64,0,0,0,0,0x66,0x6
db 0x33,0x52,0b1000,1,0,0,0x55,0x5 ; simd version doesn't have byte gran
db 0x34,0x53,0b1000,1,0,0,0x55,0x5
db 0x35,0x54,0b1000,1,0,0,0x55,0x5
db 0x33,0x62,0b1000,1,0,0,0x66,0x6
db 0x34,0x63,0b1000,1,0,0,0x66,0x6
db 0x35,0x64,0b1000,1,0,0,0x66,0x6
dq 0
oparg_popcnt:
db 0x21,0x33,0b10,0,0,0,0x33,0
db 0x21,0x44,0b10,0,0,0,0x44,0
dq 0
oparg_xchg:
db 0x21,0x11,0b10,0b1000,0,0,0x11,0 ; either operands can be memory but not both
db 0x21,0x22,0b10,0b1000,0,0,0x22,0 
db 0x21,0x33,0b10,0b1000,0,0,0x33,0 
db 0x21,0x44,0b10,0b1000,0,0,0x44,0
db 0x12,0x33,0,0,0,0,0x03,0
db 0x12,0x44,0,0,0,0,0x04,0
db 0x44,0x52,9,1,1,1,0x55,5 ; vpblending
db 0x44,0x62,9,1,1,1,0x66,6
db 0x45,0x53,9,1,1,1,0x55,5
db 0x45,0x63,9,1,1,1,0x66,6
db 0x46,0x54,9,1,1,1,0x55,5
db 0x46,0x64,9,1,1,1,0x66,6
db 0x43,0x61,0,0,0,0,0x66,0x66
dq 0
oparg_not:
db 0x11,0x11,0,0,0,0,1,0
db 0x11,0x22,0,0,0,0,2,0
db 0x11,0x33,0,0,0,0,3,0
db 0x11,0x44,0,0,0,0,4,0
dq 0
oparg_lea:
db 0x21,0x33,2,2,2,2,0x33,0
db 0x21,0x44,2,2,2,2,0x44,0
dq 0
oparg_pop:
db 0x11,0x22,2,0,0,0,0x2,0 
db 0x11,0x33,2,0,0,0,0x3,0 
db 0x11,0x44,2,0,0,0,0x4,0 
db 0x11,0xcc,0,0,0,0,0x2,0 
dq 0
oparg_push:
db 0x11,0x22,2,0,0,0,0x2,0 
db 0x11,0x33,2,0,0,0,0x3,0 
db 0x11,0x44,2,0,0,0,0x4,0 
db 0x11,0xcc,0,0,0,0,0x2,0 
dq 0
oparg_call:
db 0x11,0x44,1,0,0,0,0x4,0 
dq 0
oparg_ret:
db 0x10,0x44,0,0,0,0,0x0,0 
dq 0
oparg_jmp:
db 0x11,0x22,1,0,0,0,0x4,0 ; can jump with register or immediate
db 0x12,0x11,1,1,1,1,0x4,0 ; compared jumps must be with immediates
db 0x13,0x21,1,1,1,1,0x4,0 
db 0x12,0x44,1,1,1,1,0x4,0 
db 0x13,0x24,1,1,1,1,0x4,0 
db 0x14,0x33,1,1,1,1,0x4,0 
db 0x15,0x23,1,1,1,1,0x4,0 
db 0x16,0x77,1,1,1,1,0x4,0 
db 0x17,0x74,1,1,1,1,0x4,0 
db 0x17,0x55,1,1,1,1,0x4,0 
db 0x18,0x88,1,1,1,1,0x4,0 
db 0x19,0x84,1,1,1,1,0x4,0 
db 0x1a,0x66,1,1,1,1,0x4,0 
db 0x1b,0x64,1,1,1,1,0x4,0 
db 0x1c,0xaa,1,1,1,1,0x4,0 
db 0x1d,0xa4,1,1,1,1,0x4,0 
db 0x1e,0x99,1,1,1,1,0x4,0 
db 0x1f,0x29,1,1,1,1,0x4,0 
dq 0
oparg_perm:
db 0x31,0x51,0,0,0,2,0x55,5
db 0x31,0x61,0,0,0,2,0x66,6
db 0x32,0x63,0,0,0,2,0x66,6
db 0x33,0x64,9,1,1,1,0x66,1
db 0x34,0x65,9,1,1,1,0x66,1
oparg_cvt: ; converting floats of various types
db 0x21,0x83,0,0,0,2,0x66,0
db 0x22,0x93,0,0,0,2,0x56,0
db 0x23,0x38,0,0,0,2,0x66,0 
db 0x24,0x39,0,0,0,2,0x65,0 
db 0x25,0x89,0,0,0,2,0x56,0 
db 0x26,0x98,0,0,0,2,0x65,0 
dq 0

; array of names of each operation
opnames:
op_and: ;0026 
db "and",0 ; ∴&
db "vpand",0 ; ⁙&
op_add: ;002b
db "vpaddb",0; λζ+
db "vpaddw",0; λη+
db "vpaddd",0; λθ+
db "vpaddq",0; λι+
db "add",0
db "inc",0
db "vaddps",0; λβ+
db "vaddpd",0; λΔ
db "fadd",0
op_hadd:
db "vphaddw",0
db "vphaddd",0
db "vhaddps",0
db "vhaddpd",0
db "adox",0 
op_sub: ;002d
db "vpsubb",0; λζ- 
db "vpsubw",0; λη-
db "vpsubd",0; λθ-
db "vpsubq",0; λι-
db "sub",0
db "dec",0
db "vsubps",0; λβ-
db "vsubpd",0; λΔ-
op_mov: ;003d =
db "mov",0 ; 
db "movd",0 ; moving to simd regs, size of dword, gran of xword
db "movq",0
db "vmovdqu",0
db "movzx",0
op_mvmsk:;221f
db "vpmovmskb",0; ↯
db "pext",0
op_gt:;2270
db "vpcmpgtb",0 ; ≰ 
db "vpcmpgtw",0 ; ≰ 
db "vpcmpgtd",0 ; ≰ 
db "vpcmpgtq",0 ; ≰ 
op_test:;2259
db "test",0     ; ≙
db "vptest",0   ; ≙
op_mova:;225a
db "vmovdqa",0  ; ≚
db "movsx",0
db "movsxd",0
db "pinsrd",0
db "pinsrq",0
db "vpinsrd",0
db "vpinsrq",0
op_eq:;225f
db "vpcmpeqb",0 ; ≟
db "vpcmpeqw",0 ; ≟
db "vpcmpeqd",0 ; ≟
db "vpcmpeqq",0 ; ≟
db "cmp",0      ; ≟
db "vptest",0   ; ≟
db "vcmpps",0
db "vcmppd",0
op_nand:;22bc
db "andn",0     ; ⊼
db "vpandn",0   ; ⊼
op_xor:;22bd
db "xor",0      ; ⊻
db "vpxor",0    ; ⊻
db "pxor",0    ; ⊻
op_or:;22c0
db "or",0       ; ⋀
db "vpor",0     ; ⋀
op_bcast:;22d1
db "vpbroadcastb",0; κζ⊱
db "vpbroadcastw",0; κη⊱
db "vpbroadcastd",0; κθ⊱
db "vpbroadcastq",0; κι⊱ 
db "pdep",0
op_tzcnt:;22D6
db "tzcnt",0    ; ⋖
op_lzcnt:;22D7
db "lzcnt",0    ; ⋗
op_shl:
db "shl",0 ; ≪
db "shlx",0
db "vpsllw",0
db "vpslld",0
db "vpsllq",0
db "vpsllvd",0
db "vpsllvq",0
op_shr:
db "shr",0 ; ≫
db "shrx",0
db "vpsrlw",0
db "vpsrld",0
db "vpsrlq",0
db "vpsrlvd",0
db "vpsrlvq",0
op_popcnt: ; ⋮
db "popcnt",0
op_xchg: ; ⇋
db "xchg",0
db "bswap",0
db "vpblendvb",0
db "vpblendw",0
db "vpblendd",0
db "vpblendq",0
op_not:
db "not",0
op_lea:
db "lea",0
op_push:
db "push",0
op_pop:
db "pop",0
op_call:
db "call",0
op_ret:
db "ret",0
op_jmp:
db "jmp",0
db "jz",0
db "jnz",0
db "js",0
db "jns",0
db "ja",0
db "jae",0
db "jb",0
db "jbe",0
db "jl",0
db "jle",0
db "jg",0
db "jge",0
db "jo",0
db "jno",0
op_perm: ; ⧖
db "vpshufb",0
db "vpermd",0
db "vpermq",0
db "vperm2i128",0
op_cvt:
db "vcvtdq2ps",0
db "vcvtdq2pd",0
db "vcvtps2dq",0
db "vcvtpd2dq",0
db "vcvtps2pd",0
db "vcvtpd2ps",0
op_mul:
db "mul",0
db "vmulps",0
db "vmulpd",0
db "fmul",0
op_div:
db "div",0
db "vdivps",0
db "vdivpd",0
db "fdiv",0


; operation size is directly after instruction.
; Double define means first is grainularity and second is size
; These can be ommitted if you also ommitted a register argument as a tacit
;  input from the previous operation.
; Sizes also double as modulators for rflags on instructions that care about that
;  but not register size.
sizespec: 
dw 0x03b6 ;ζ - byte      - zero
dw 0x03b7 ;η - word      - not
dw 0x03b8 ;θ - dword     - sign
dw 0x03b9 ;ι - qword     - equal
dw 0x03ba ;κ - xword     - carry
dw 0x03bb ;λ - yword     - less than
dw 0x03bc ;μ - zword	 - above
dw 0x03b2 ;β - singles   - below
dw 0x0394 ;Δ - doubles   - overflow
dw 0x0393 ;Γ - 80 bit FP - greater than
dw 0x044f ;я - high byte/mmx
dw 0x044e ;ю - segment/control
dw 0x03a3 ;Σ - not a size but a prefix hack for controlling the preprocessor.
dq 0 ; padding for 32 bytes

sizenametable:
dw sn_byte-sizenames
dw sn_word-sizenames
dw sn_dword-sizenames
dw sn_qword-sizenames
dw sn_xword-sizenames
dw sn_yword-sizenames
dw sn_zword-sizenames
dw sn_single-sizenames
dw sn_double-sizenames
dw sn_eighty-sizenames
dw sn_high-sizenames
dw sn_special-sizenames
sizenames:
sn_byte:
db "al",0,"bl",0,"cl",0,"dl",0,"dil",0,"sil",0
db 0,0 ; bp and sp aren't in byte size
db "r8b",0,"r9b",0,"r10b",0,"r11b",0,"r12b",0,"r13b",0,"r14b",0,"r15b",0
sn_word:
db "ax",0,"bx",0,"cx",0,"dx",0,"di",0,"si",0,"bp",0,"sp",0
db "r8w",0,"r9w",0,"r10w",0,"r11w",0,"r12w",0,"r13w",0,"r14w",0,"r15w",0
sn_dword:
db "eax",0,"ebx",0,"ecx",0,"edx",0,"edi",0,"esi",0,"ebp",0,"esp",0
db "r8d",0,"r9d",0,"r10d",0,"r11d",0,"r12d",0,"r13d",0,"r14d",0,"r15d",0
sn_qword:
db "rax",0,"rbx",0,"rcx",0,"rdx",0,"rdi",0,"rsi",0,"rbp",0,"rsp",0
db "r8",0,"r9",0,"r10",0,"r11",0,"r12",0,"r13",0,"r14",0,"r15",0
sn_xword:
db "xmm0",0,"xmm1",0,"xmm2",0,"xmm3",0,"xmm4",0,"xmm5",0
db "xmm6",0,"xmm7",0,"xmm8",0,"xmm9",0,"xmm10",0,"xmm11",0
db "xmm12",0,"xmm13",0,"xmm14",0,"xmm15",0
sn_yword:
db "ymm0",0,"ymm1",0,"ymm2",0,"ymm3",0,"ymm4",0,"ymm5",0
db "ymm6",0,"ymm7",0,"ymm8",0,"ymm9",0,"ymm10",0,"ymm11",0
db "ymm12",0,"ymm13",0,"ymm14",0,"ymm15",0
sn_zword:
db "zmm0",0,"zmm1",0,"zmm2",0,"zmm3",0,"zmm4",0,"zmm5",0
db "zmm6",0,"zmm7",0,"zmm8",0,"zmm9",0,"zmm10",0,"zmm11",0
db "zmm12",0,"zmm13",0,"zmm14",0,"zmm15",0
sn_single:
sn_double:
sn_eighty:
db "st0",0,"st1",0,"st2",0,"st3",0,"st4",0,"st5",0,"st6",0,"st7",0
sn_high:
db "ah",0,"bh",0,"ch",0,"dh",0,"dih",0,"sih",0,0,0
db "mm0",0,"mm1",0,"mm2",0,"mm3",0,"mm4",0,"mm5",0,"mm6",0,"mm7",0 ; assume any potential conflicts rule against mmx.
sn_special:
db "es",0,"gs",0,"cs",0,"ds",0,"fs",0,"ss",0,0,0
db "cr0",0,"cr1",0,"cr2",0,"cr3",0,"cr4",0,"cr5",0,"cr6",0,"cr7",0
sizetypetable:
dw st_byte-sizetypes
dw st_word-sizetypes
dw st_dword-sizetypes
dw st_qword-sizetypes
dw st_xword-sizetypes
dw st_yword-sizetypes
dw st_zword-sizetypes
dw st_double-sizetypes
dw st_single-sizetypes
dw st_high-sizetypes
dw st_special-sizetypes
sizetypes:
st_high: 
st_byte: db "byte",0
st_word: db "word",0
st_dword: db "dword",0
st_qword: db "qword",0
st_xword: db "oword",0
st_yword: db "yword",0
st_zword: db "zword",0
st_single: db "dword",0
st_double: db "qword",0
st_special: db "word",0
